name: Pull Request

on:
  pull_request:
    branches:
      - develop
      - staging
      - production

jobs:
  Install:
    runs-on: ubuntu-latest
    container:
      image: node:16
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            node_modules
            build
          key: cache-${{ github.run_id }}
          restore-keys: |
            cache-
      - name: Install packages
        run: yarn install --frozen-lockfile
  Build:
    runs-on: ubuntu-latest
    needs: Install
    container:
      image: node:16
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            node_modules
            build
          key: cache-${{ github.run_id }}
          restore-keys: |
            cache-
      - name: Build code
        run: yarn build
      - name: Test build
        run: ls -la
  Push:
    runs-on: ubuntu-latest
    needs: Build
    if: github.event.pull_request.base.ref == 'staging' || github.event.pull_request.base.ref == 'production'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            node_modules
            build
          key: cache-${{ github.run_id }}
          restore-keys: |
            cache-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Test files
        run: ls -la
      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     registry: rg.fr-par.scw.cloud/agence-public
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     push: true
      #     tags: natiq/drone-ci_test:latest
      #     context: ./
      #     file: ./Dockerfile
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}
  # Notify:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: node:16
  #   steps:
  #     - name: send telegram message
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_TO }}
  #         token: ${{ secrets.TELEGRAM_TOKEN }}
  #         message: |
  #           ${{ github.actor }} created commit:
  #           Commit message: ${{ github.event.commits[0].message }}

  #           Repository: ${{ github.repository }}

  #           See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
