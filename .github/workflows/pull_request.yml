name: Pull Request

on:
  pull_request:
    branches:
      - develop
      - staging
      - production

jobs:
  Install:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Download yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Install packages
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

  Build:
    runs-on: ubuntu-latest
    needs: Install
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Download yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Download build cache
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-
      - name: Use Node.js 16
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Build code
        run: yarn build

  Push:
    runs-on: ubuntu-latest
    needs: Build
    if: github.event.pull_request.base.ref == 'staging' || github.event.pull_request.base.ref == 'production'
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
      - name: Download yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Download build cache
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/drone-ci_test:latest
            ${{ secrets.DOCKER_REGISTRY }}/drone-ci_test:${{ github.sha }}
          context: ./
          file: ./Dockerfile
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  # Notify:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: node:16
  #   steps:
  #     - name: send telegram message
  #       uses: appleboy/telegram-action@master
  #       with:
  #         to: ${{ secrets.TELEGRAM_TO }}
  #         token: ${{ secrets.TELEGRAM_TOKEN }}
  #         message: |
  #           ${{ github.actor }} created commit:
  #           Commit message: ${{ github.event.commits[0].message }}

  #           Repository: ${{ github.repository }}

  #           See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
